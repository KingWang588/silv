package com.yhy.hzzll.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yhy.hzzll.entity.Footprint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOTPRINT".
*/
public class FootprintDao extends AbstractDao<Footprint, Long> {

    public static final String TABLENAME = "FOOTPRINT";

    /**
     * Properties of entity Footprint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nid = new Property(1, String.class, "nid", false, "NID");
        public final static Property Addtime = new Property(2, String.class, "addtime", false, "ADDTIME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Cate_name = new Property(4, String.class, "cate_name", false, "CATE_NAME");
    }


    public FootprintDao(DaoConfig config) {
        super(config);
    }
    
    public FootprintDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOTPRINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NID\" TEXT," + // 1: nid
                "\"ADDTIME\" TEXT," + // 2: addtime
                "\"TITLE\" TEXT," + // 3: title
                "\"CATE_NAME\" TEXT);"); // 4: cate_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOTPRINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Footprint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(2, nid);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(3, addtime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String cate_name = entity.getCate_name();
        if (cate_name != null) {
            stmt.bindString(5, cate_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Footprint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nid = entity.getNid();
        if (nid != null) {
            stmt.bindString(2, nid);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(3, addtime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String cate_name = entity.getCate_name();
        if (cate_name != null) {
            stmt.bindString(5, cate_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Footprint readEntity(Cursor cursor, int offset) {
        Footprint entity = new Footprint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // addtime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // cate_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Footprint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddtime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCate_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Footprint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Footprint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Footprint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
